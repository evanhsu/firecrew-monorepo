/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as db from "./../src/database/db"
import type * as errors from "./../src/errors/errors"
import type { Context } from "./../src/graphql/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PersonQueryFilterInput: { // input type
    id?: string | null; // ID
    qualification?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Board: db.BoardModel;
  BoardState: db.BoardStateModel;
  GridRow: db.GridRowModel;
  Group: db.GroupModel;
  NotFoundError: errors.NotFoundError;
  Person: db.PersonModel;
  Query: {};
}

export interface NexusGenInterfaces {
  Error: NexusGenRootTypes['NotFoundError'];
}

export interface NexusGenUnions {
  GetBoardOutput: NexusGenRootTypes['Board'] | NexusGenRootTypes['NotFoundError'];
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Board: { // field return type
    group: NexusGenRootTypes['Group'] | null; // Group
    id: string; // ID!
    name: string | null; // String
    state: NexusGenRootTypes['BoardState'] | null; // BoardState
  }
  BoardState: { // field return type
    board: NexusGenRootTypes['Board']; // Board!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    revision: number; // Int!
    rows: Array<NexusGenRootTypes['GridRow'] | null>; // [GridRow]!
  }
  GridRow: { // field return type
    activeColumn: number; // Int!
    id: string | null; // ID
    order: number | null; // Int
    person: NexusGenRootTypes['Person']; // Person!
  }
  Group: { // field return type
    board: NexusGenRootTypes['Board'] | null; // Board
    id: string | null; // ID
    members: Array<NexusGenRootTypes['Person'] | null> | null; // [Person]
    name: string | null; // String
  }
  NotFoundError: { // field return type
    message: string | null; // String
    notFoundId: string | null; // String
    notFoundTypename: string | null; // String
  }
  Person: { // field return type
    avatar: string | null; // String
    id: string | null; // ID
    name: string | null; // String
    qualifications: Array<string | null> | null; // [String]
  }
  Query: { // field return type
    getBoardByGroup: NexusGenRootTypes['Board'] | null; // Board
    getBoardById: NexusGenRootTypes['GetBoardOutput'] | null; // GetBoardOutput
    people: Array<NexusGenRootTypes['Person'] | null> | null; // [Person]
  }
  Error: { // field return type
    message: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Board: { // field return type name
    group: 'Group'
    id: 'ID'
    name: 'String'
    state: 'BoardState'
  }
  BoardState: { // field return type name
    board: 'Board'
    createdAt: 'DateTime'
    id: 'ID'
    revision: 'Int'
    rows: 'GridRow'
  }
  GridRow: { // field return type name
    activeColumn: 'Int'
    id: 'ID'
    order: 'Int'
    person: 'Person'
  }
  Group: { // field return type name
    board: 'Board'
    id: 'ID'
    members: 'Person'
    name: 'String'
  }
  NotFoundError: { // field return type name
    message: 'String'
    notFoundId: 'String'
    notFoundTypename: 'String'
  }
  Person: { // field return type name
    avatar: 'String'
    id: 'ID'
    name: 'String'
    qualifications: 'String'
  }
  Query: { // field return type name
    getBoardByGroup: 'Board'
    getBoardById: 'GetBoardOutput'
    people: 'Person'
  }
  Error: { // field return type name
    message: 'String'
  }
}

export interface NexusGenArgTypes {
  Board: {
    state: { // args
      revision?: number | null; // Int
    }
  }
  Query: {
    getBoardByGroup: { // args
      groupId: string; // String!
    }
    getBoardById: { // args
      boardId: string; // String!
    }
    people: { // args
      filter?: NexusGenInputs['PersonQueryFilterInput'] | null; // PersonQueryFilterInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  GetBoardOutput: "Board" | "NotFoundError"
  Error: "NotFoundError"
}

export interface NexusGenTypeInterfaces {
  NotFoundError: "Error"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "Error" | "GetBoardOutput";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}