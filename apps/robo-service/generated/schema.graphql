### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Board {
  group: Group
  id: ID!
  name: String
  state(revision: Int): BoardState
}

""""""
type BoardState {
  board: Board!
  createdAt: DateTime!
  id: ID!

  """
  The revision is an integer that's incremented every time the Board is updated (an "update" consists of a single Person being moved on the Board)
  """
  revision: Int!
  rows: [GridRow]!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

interface Error {
  message: String
}

union GetBoardOutput = Board | NotFoundError

type GridRow {
  """
  Columns are 0-indexed from left-to-right (column 0 is the left-most).The activeColumn is the column in which the Person on this row resides.
  """
  activeColumn: Int!
  id: ID

  """The 0-index row number, where Row 0 is at the top of the Board"""
  order: Int
  person: Person!
}

type Group {
  """The Board that this Group owns (each Group owns a single Board)"""
  board: Board
  id: ID
  members: [Person]
  name: String
}

type NotFoundError implements Error {
  message: String
  notFoundId: String
  notFoundTypename: String
}

type Person {
  avatar: String
  id: ID
  name: String
  qualifications: [String]
}

input PersonQueryFilterInput {
  id: ID

  """
  Only people with this qualification will be returned. Example: `{ qualification: "ICT4" }`
  """
  qualification: String
}

type Query {
  getBoardByGroup(groupId: String!): Board
  getBoardById(boardId: String!): GetBoardOutput
  people(filter: PersonQueryFilterInput): [Person]
}