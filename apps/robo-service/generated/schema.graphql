### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AddPersonToBoardMutationResponse {
  boardState: BoardState
}

type Board {
  group: Group
  id: ID!
  name: String
  state(revision: Int): BoardState
}

""""""
type BoardState {
  board: Board!
  createdAt: DateTime!
  id: ID!

  """
  The revision is an integer that's incremented every time the Board is updated (an "update" consists of a single Person being moved on the Board)
  """
  revision: Int!
  rows: [PersonTile]!
}

input CreatePersonInput {
  """
  The full name of the Person you're adding (full names make it easier to tell people apart)
  """
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

interface Error {
  message: String
}

union GetBoardOutput = Board | NotFoundError

input GridPositionInput {
  """
  The left-most column on the Board is Column 0. The column number increases as you move to the _right_.
  """
  column: Int!

  """
  The row at the very top of the Board is Row 0. The row number increases as you move down the board.
  """
  row: Int!
}

type Group {
  """The Board that this Group owns (each Group owns a single Board)"""
  board: Board
  id: ID
  members: [Person]
  name: String
}

type MoveTileMutationResponse {
  boardState: BoardState
}

type Mutation {
  addExistingPersonToBoard(
    """The ID of the Board to add this user to."""
    boardId: ID!
    personId: ID!
  ): AddPersonToBoardMutationResponse
  createAndAddPersonToBoard(
    """The ID of the Board to add this user to."""
    boardId: ID!
    person: CreatePersonInput!
  ): AddPersonToBoardMutationResponse
  moveTile(
    boardId: ID!

    """
    The row/column where the Tile was positioned _after_ it was moved, i.e. the "destination"
    """
    newPosition: GridPositionInput!
    tileId: ID!
  ): MoveTileMutationResponse
}

type NotFoundError implements Error {
  message: String
  notFoundId: String
  notFoundTypename: String
}

type Person {
  avatar: String
  id: ID!
  name: String!
  qualifications: [String]!
}

input PersonQueryIncludeFilterInput {
  """This string will be fuzzy-matched with Peoples' names"""
  fuzzyName: String
  id: ID

  """
  Only people with this qualification will be returned. Example: `{ qualification: "ICT4" }`
  """
  qualification: String
}

input PersonQueryOmitFilterInput {
  """Omit people who appear on this specific Rotation Board"""
  boardId: ID

  """Omit People with these specific IDs from the results"""
  ids: [ID]
}

type PersonTile {
  """
  Columns are 0-indexed from left-to-right (column 0 is the left-most).The activeColumn is the column in which the Person on this row resides.
  """
  column: Int!
  id: ID!
  person: Person!

  """The 0-index row number, where Row 0 is at the top of the Board"""
  row: Int!
}

type Query {
  getBoardByGroup(groupId: String!): [Board]!
  getBoardById(boardId: String!): GetBoardOutput
  people(include: PersonQueryIncludeFilterInput, omit: PersonQueryOmitFilterInput): [Person]!
}

type Subscription {
  watchBoard(boardId: String!): Board!
}